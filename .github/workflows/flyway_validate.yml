name: Validate Flyway Migration
on:
  pull_request:
    types: [ opened, synchronize, edited ]
  push:
    branches:
      - master
jobs:
  validate_on_pull_request:
    name: Validate Flyway Job PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          fetch-depth: 1
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Export new migrates
        id: export-new-migrates
        run: |
          git diff --name-only --diff-filter=A origin/${{ github.base_ref }} HEAD | grep -E 'java/db/' > new_migrates.txt || true
          echo "Exported migrates"
      - name: Check migrates empty
        id: check-migrates-empty
        run: |
          if [ ! -s new_migrates.txt ]; then
            echo "skip-steps=true" >> $GITHUB_ENV
            echo "Flyway validation results:" >> $GITHUB_STEP_SUMMARY
            echo "No new migrates, skipping validation" >> $GITHUB_STEP_SUMMARY
            echo "No migrates skipping all following steps"
          else
            echo "skip-steps=false" >> $GITHUB_ENV
            echo "Found new migrates, continue with validation"
          fi
      - name: Parse pom.xml version
        if: env.skip-steps != 'true'
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      - name: Set up Java
        if: env.skip-steps != 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run Java Validation
        if: env.skip-steps != 'true'
        run: java .github/java/FlywayValidation.java ${{ env.version }} new_migrates.txt

  validate_on_push_to_master:
    name: Validate Flyway Job PUSH
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: List PRs
        id: prs
        uses: actions/github-script@v6
        with:
          script: |
            const PRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            console.log(`Found ${PRs.data.length} open PRs.`);
            const SHAs = PRs.data.map(pr => pr.head.sha);
            for (const sha of SHAs) {
              console.log(`SHA: ${sha}`);
            
              const response = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha
              });
            
              const checks = response.data.check_runs;
              console.log(`Found ${checks.length} checks.`);
              const checkIDs = response.data.check_runs.map(check => check.id);
              console.log('Check IDs: ' + checkIDs.join(', '));
            
              for (const check of checkIDs) {
                const check_bla = await github.rest.checks.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  check_run_id: check
                });
            
                console.log(`Check ${check} name: ${check_bla.data.name}`);
                const PRs = check_bla.data.pull_requests.map(check => check.number);
                console.log('Check PRs: ' + PRs.join(', '));
                console.log(`Updating check ${check}...`);
                await github.rest.checks.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  check_run_id: check,
                  status: 'completed', // set status to 'completed' for example, you can change it as needed
                  conclusion: 'failure' // set conclusion to 'success' for example, you can change it as needed
                });
              }
            }
