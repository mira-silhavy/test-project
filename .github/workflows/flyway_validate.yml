name: Validate Flyway Migration
on:
  pull_request:
    types: [ opened, synchronize, edited ]
  push:
    branches:
      - master
jobs:
  validate_on_pull_request:
    name: Validate Flyway Job PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          fetch-depth: 1
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Export new migrates
        id: export-new-migrates
        run: |
          git diff --name-only --diff-filter=A origin/${{ github.base_ref }} HEAD | grep -E 'java/db/' > new_migrates.txt || true
          echo "Exported migrates"
      - name: Check migrates empty
        id: check-migrates-empty
        run: |
          if [ ! -s new_migrates.txt ]; then
            echo "skip-steps=true" >> $GITHUB_ENV
            echo "Flyway validation results:" >> $GITHUB_STEP_SUMMARY
            echo "No new migrates, skipping validation" >> $GITHUB_STEP_SUMMARY
            echo "No migrates skipping all following steps"
          else
            echo "skip-steps=false" >> $GITHUB_ENV
            echo "Found new migrates, continue with validation"
          fi
      - name: Parse pom.xml version
        if: env.skip-steps != 'true'
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      - name: Set up Java
        if: env.skip-steps != 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run Java Validation
        if: env.skip-steps != 'true'
        run: java .github/java/FlywayValidation.java ${{ env.version }} new_migrates.txt

  validate_on_push_to_master:
    name: Validate Flyway Job PUSH
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: List PRs
        id: prs
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            return response.data.map(pr => pr.number);

      - name: Set status
        uses: actions/github-script@v6
        with:
          script: |
            const promises = context.payload.commits.map(commit => {
              const [owner, repo] = context.payload.repository.full_name.split('/');
              return github.repos.createCommitStatus({
                owner: owner,
                repo: repo,
                sha: commit.id,
                state: 'success',
                target_url: 'https://example.com',
                description: 'All checks passed',
                context: 'continuous-integration'
              });
            });
            return Promise.all(promises);
          token: ${{ secrets.GITHUB_TOKEN }}
