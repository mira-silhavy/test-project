name: Validate Flyway Migration
on:
  pull_request:
    types: [ opened, synchronize, edited ]
  push:
    branches:
      - master
jobs:
  validate_on_pull_request:
    name: Validate Flyway Job
    runs-on: ubuntu-latest
    if: github.event.name == 'pull_request'
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          fetch-depth: 1
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Export new migrates
        id: export-new-migrates
        run: |
          git diff --name-only --diff-filter=A origin/${{ github.base_ref }} HEAD | grep -E 'java/db/' > new_migrates.txt || true
          echo "Exported migrates"
      - name: Check migrates empty
        id: check-migrates-empty
        run: |
          if [ ! -s new_migrates.txt ]; then
            echo "skip-steps=true" >> $GITHUB_ENV
            echo "Flyway validation results:" >> $GITHUB_STEP_SUMMARY
            echo "No new migrates, skipping validation" >> $GITHUB_STEP_SUMMARY
            echo "No migrates skipping all following steps"
          else
            echo "skip-steps=false" >> $GITHUB_ENV
            echo "Found new migrates, continue with validation"
          fi
      - name: Parse pom.xml version
        if: env.skip-steps != 'true'
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
      - name: Set up Java
        if: env.skip-steps != 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run Java Validation
        if: env.skip-steps != 'true'
        run: java .github/java/FlywayValidation.java ${{ env.version }} new_migrates.txt

  validate_on_push_to_master:
    name: Validate Flyway Job
    runs-on: ubuntu-latest
    if: github.event.name == 'push'
    steps:
      - uses: 8BitJonny/gh-get-current-pr@2.2.0
      - run: echo "PR ${prNumber} ${prTitle} at ${prUrl} is ${prJSON}"
        if: steps.PR.outputs.pr_found == 'true'
        env:
          # JSON object with the full PR object
          # toJSON(fromJSON(...pr)) parses it into memory and then format is with pretty-print.
          prJSON: ${{ toJSON(fromJSON(steps.current_pr.outputs.pr)) }}
          # Direct access to common PR properties
          prNumber: ${{ steps.PR.outputs.number }}
          prUrl: ${{ steps.PR.outputs.pr_url }}
          prTitle: ${{ steps.PR.outputs.pr_title }}
          prBody: ${{ steps.PR.outputs.pr_body }}
          prCreatedAt: ${{ steps.PR.outputs.pr_created_at }}
          prMergedAt: ${{ steps.PR.outputs.pr_merged_at }}
          prClosedAt: ${{ steps.PR.outputs.pr_closed_at }}
          prLabel: ${{ steps.PR.outputs.pr_labels }}
